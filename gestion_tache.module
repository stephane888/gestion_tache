<?php
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Session\AccountInterface;

/**
 *
 * @file
 * Primary module hooks for gestion tache module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

/**
 * Implements hook_jsonapi_entity_filter_access().
 */
function gestion_tache_jsonapi_entity_filter_access(EntityTypeInterface $entity_type, AccountInterface $account) {
  // All core entity types and most or all contrib entity types allow users
  // with the entity type's administrative permission to view all of the
  // entities, so enable similarly permissive filtering to those users as well.
  // A contrib module may override this decision by returning
  // AccessResult::forbidden() from its implementation of this hook.
  // if ($admin_permission = $entity_type->getAdminPermission()) {
  // return ([
  // JSONAPI_FILTER_AMONG_ALL => AccessResult::allowedIfHasPermission($account,
  // $admin_permission)
  // ]);
  // }
  return ([
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowed(),
    JSONAPI_FILTER_AMONG_PUBLISHED => AccessResult::allowed(),
    JSONAPI_FILTER_AMONG_OWN => AccessResult::allowed()
  ]);
}

/**
 * implement hook_entity_load
 */
// function gestion_tache_entity_load($entities) {
// foreach ($entities as $entity) {
// //
// }
// // dump($entities);
// }
// function gestion_tache_app_project_load($entities) {
// foreach ($entities as $entity) {
// /**
// *
// * @var Drupal\gestion_tache\Entity\AppProject $entity
// */
// // $entity->set('count_kksa888', 'ze');
// }
// }

/**
 * Update value max_length from 50 to 250.
 *
 * implement hook_update_8001
 *
 * @see https://www.drupal.org/node/2554097
 * @see https://www.drupal.org/docs/drupal-apis/update-api/introduction-to-update-api-for-drupal-8
 */
function __gestion_tache_update_name_max_length($entity_type_id) {
  /**
   *
   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $entityStorage
   */
  $entityStorage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
  
  // Retrieve existing field data.
  $database = \Drupal::database();
  $table = $entity_type_id . '_field_data';
  $names = $database->select($table, 'et')->fields('et', [
    'id',
    'langcode',
    'name'
  ])->execute()->fetchAll(\PDO::FETCH_ASSOC);
  // Remove data from the column.
  $database->update($table)->fields([
    'name' => NULL
  ])->execute();
  //
  // si les revisions sont activÃ©es.
  if ($entityStorage->getRevisionTable()) {
    $table_revision = $entity_type_id . "_field_revision";
    $names_revision = $database->select($table_revision, 'et')->fields('et', [
      'id',
      'langcode',
      'name'
    ])->execute()->fetchAll(\PDO::FETCH_ASSOC);
    $database->update($table_revision)->fields([
      'name' => NULL
    ])->execute();
  }
  
  // Remove old definition field.
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  $storagedef = $updateManager->getFieldStorageDefinition('name', $entity_type_id);
  $updateManager->uninstallFieldStorageDefinition($storagedef);
  // Load new definition field in code.
  /**
   *
   * @var \Drupal\Core\Entity\EntityFieldManager $fieldManager
   */
  $fieldManager = \Drupal::service('entity_field.manager');
  $fields = $fieldManager->getFieldStorageDefinitions($entity_type_id);
  $updateManager->installFieldStorageDefinition('name', $entity_type_id, "gestion_tache", $fields['name']);
  // Restore entity data in the new schema.
  foreach ($names as $name) {
    $database->update($table)->fields([
      'name' => $name['name']
    ])->condition('id', $name['id'])->condition('langcode', $name['langcode'])->execute();
  }
  // restore revision
  if ($entityStorage->getRevisionTable())
    foreach ($names_revision as $name) {
      $database->update($table_revision)->fields([
        'name' => $name['name']
      ])->condition('id', $name['id'])->condition('langcode', $name['langcode'])->execute();
    }
}

/**
 * Update value max_length from 50 to 250.
 *
 * implement hook_update_8001
 *
 * @see https://www.drupal.org/node/2554097
 * @see https://www.drupal.org/docs/drupal-apis/update-api/introduction-to-update-api-for-drupal-8
 */
function gestion_tache_update_8001() {
  __gestion_tache_update_name_max_length('app_project');
  __gestion_tache_update_name_max_length('app_prime');
  __gestion_tache_update_name_max_length('app_client');
  __gestion_tache_update_name_max_length('app_memos');
}

/**
 * Implements hook_theme().
 */
function gestion_tache_theme() {
  $theme = [];
  $theme['app_project'] = [
    'render element' => 'elements',
    'file' => 'app_project.page.inc',
    'template' => 'app_project'
  ];
  $theme['app_project_content_add_list'] = [
    'render element' => 'content',
    'variables' => [
      'content' => NULL
    ],
    'file' => 'app_project.page.inc'
  ];
  //
  $theme['app_memos'] = [
    'render element' => 'elements',
    'file' => 'app_memos.page.inc',
    'template' => 'app_memos'
  ];
  $theme['app_memos_content_add_list'] = [
    'render element' => 'content',
    'variables' => [
      'content' => NULL
    ],
    'file' => 'app_memos.page.inc'
  ];
  //
  $theme['app_prime'] = [
    'render element' => 'elements',
    'file' => 'app_prime.page.inc',
    'template' => 'app_prime'
  ];
  $theme['app_prime_content_add_list'] = [
    'render element' => 'content',
    'variables' => [
      'content' => NULL
    ],
    'file' => 'app_prime.page.inc'
  ];
  //
  $theme['app_client'] = [
    'render element' => 'elements',
    'file' => 'app_client.page.inc',
    'template' => 'app_client'
  ];
  $theme['app_client_content_add_list'] = [
    'render element' => 'content',
    'variables' => [
      'content' => NULL
    ],
    'file' => 'app_client.page.inc'
  ];
  //
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function gestion_tache_theme_suggestions_app_project(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#app_project'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  
  $suggestions[] = 'app_project__' . $sanitized_view_mode;
  $suggestions[] = 'app_project__' . $entity->bundle();
  $suggestions[] = 'app_project__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'app_project__' . $entity->id();
  $suggestions[] = 'app_project__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function gestion_tache_theme_suggestions_app_memos(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#app_memos'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  
  $suggestions[] = 'app_memos__' . $sanitized_view_mode;
  $suggestions[] = 'app_memos__' . $entity->bundle();
  $suggestions[] = 'app_memos__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'app_memos__' . $entity->id();
  $suggestions[] = 'app_memos__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function gestion_tache_theme_suggestions_app_prime(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#app_prime'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  
  $suggestions[] = 'app_prime__' . $sanitized_view_mode;
  $suggestions[] = 'app_prime__' . $entity->bundle();
  $suggestions[] = 'app_prime__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'app_prime__' . $entity->id();
  $suggestions[] = 'app_prime__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function gestion_tache_theme_suggestions_app_client(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#app_client'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  
  $suggestions[] = 'app_client__' . $sanitized_view_mode;
  $suggestions[] = 'app_client__' . $entity->bundle();
  $suggestions[] = 'app_client__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'app_client__' . $entity->id();
  $suggestions[] = 'app_client__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 *
 * @param \Drupal\mysql\Driver\Database\mysql\Select $query
 */
function gestion_tache_query_alter(\Drupal\Core\Database\Query\AlterableInterface $query) {
  // \Stephane888\Debug\debugLog::kintDebugDrupal($query->__toString(),
  // 'gestion_tache_query_alter', true);

/**
 * On filtre les produits dans le panier en fonction du domaine encours.
 */
  // if ($query->hasTag('commerce_cart_order_ids')) {
  // $query->addJoin('INNER', 'commerce_order_item', 'coi',
  // 'coi.order_id=commerce_order.order_id');
  // $query->addJoin('INNER', 'commerce_product_variation_field_data', 'prd_va',
  // 'prd_va.variation_id=coi.purchased_entity');
  // $query->addJoin('INNER', 'commerce_product__field_domain_access', 'prd_da',
  // 'prd_da.entity_id=prd_va.product_id');
  // $query->condition('prd_da.field_domain_access_target_id',
  // $domain->getActiveId());
  // }
}

/**
 * implement hook_query_entityreference_alter
 * Filtrer les requetes de recherche via le domaine tant que cela est possible.
 *
 * @param \Drupal\Core\Database\Query\AlterableInterface $query
 */
function gestion_tache_query_entityreference_alter(\Drupal\mysql\Driver\Database\mysql\Select $query) {
  // \Stephane888\Debug\debugLog::kintDebugDrupal($query->__toString(),
  // 'gestion_tache_query_entity_reference_alter', true);
  // /**
  // *
  // * @var \Drupal\node\Plugin\EntityReferenceSelection\NodeSelection
  // $entity_reference
  // */
  // $entity_reference =
  // $query->getMetaData('entity_reference_selection_handler');
}


